'use client';

import { useState } from 'react';
import { useAuth } from '@/context/AuthContext';
import { useTelegram } from '@/context/TelegramContext';
import styles from '../DebugPanel.module.css';

interface AuthDetailsTabProps {
  authStateDetails: any;
  supabaseConnectionDetails: {
    connected: boolean;
    error: string | object | null;
  };
  telegramUserFromProps: any;
  telegramUserContext: any;
  telegramInitDataContext: string | null;
  authContextData: any;
  getSupabaseInfoForAuthTab: () => any;
  onCopy: () => void;
}

const AuthDetailsTab: React.FC<AuthDetailsTabProps> = ({ 
  authStateDetails, 
  supabaseConnectionDetails, 
  telegramUserFromProps,
  telegramUserContext,
  telegramInitDataContext,
  authContextData,
  getSupabaseInfoForAuthTab,
  onCopy 
}) => {
  const [isCreatingUser, setIsCreatingUser] = useState(false);
  const [creationResult, setCreationResult] = useState<any>(null);
  const [creationError, setCreationError] = useState<string | null>(null);
  
  const auth = useAuth();
  const { telegramUser } = useTelegram();
  
  const handleForceCreateUser = async () => {
    if (!telegramUser) {
      setCreationError('–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: –¥–∞–Ω–Ω—ã–µ Telegram –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã');
      return;
    }
    
    try {
      setIsCreatingUser(true);
      setCreationResult(null);
      setCreationError(null);
      
      console.log('–í—ã–∑—ã–≤–∞–µ–º –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –¥–∞–Ω–Ω—ã–º–∏:', telegramUser);
      const result = await auth.forceCreateUser(telegramUser);
      
      if (result) {
        setCreationResult(result);
        console.log('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω:', result);
      } else {
        setCreationError('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–Ω—Å–æ–ª—å –¥–ª—è –¥–µ—Ç–∞–ª–µ–π.');
        console.error('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', auth.error);
      }
    } catch (error) {
      const errorMessage = error instanceof Error ? error.message : String(error);
      setCreationError(`–û—à–∏–±–∫–∞: ${errorMessage}`);
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
    } finally {
      setIsCreatingUser(false);
    }
  };
  
  const supabaseInfo = getSupabaseInfoForAuthTab();
  
  return (
    <div className={styles.tabContentInner}>
      <div className={styles.section}>
        <h3 className={styles.sectionHeader}>–¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏</h3>
        
        <div className={styles.authDebugGrid}>
          <div className={styles.authDebugInfo}>
            <strong>Auth Context:</strong> 
            <span className={authContextData?.isAuthenticated ? styles.statusOk : styles.statusError}>
              {authContextData?.isAuthenticated ? '–ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω' : '–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω'}
            </span>
          </div>
          
          <div className={styles.authDebugInfo}>
            <strong>–ó–∞–≥—Ä—É–∑–∫–∞:</strong> {authContextData?.isLoading ? '–î–∞' : '–ù–µ—Ç'}
          </div>
          
          <div className={styles.authDebugInfo}>
            <strong>–û—à–∏–±–∫–∞:</strong> {authContextData?.error || '–ù–µ—Ç'}
          </div>

          {!authContextData?.isAuthenticated && telegramUser && (
            <div className={styles.authDebugInfo} style={{
              backgroundColor: 'rgba(79, 70, 229, 0.15)',
              padding: '12px',
              borderRadius: '8px',
              borderLeft: '3px solid rgba(79, 70, 229, 0.8)',
              marginTop: '10px',
              gridColumn: '1 / -1'
            }}>
              <button 
                className={styles.actionButton}
                style={{
                  fontSize: '14px',
                  padding: '8px 16px',
                  margin: '0',
                  width: '100%',
                  fontWeight: '600',
                  backgroundColor: 'rgba(79, 70, 229, 0.9)'
                }}
                onClick={handleForceCreateUser}
                disabled={isCreatingUser}
              >
                {isCreatingUser ? '–°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...' : 'üõ†Ô∏è –°–æ–∑–¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤—Ä—É—á–Ω—É—é'}
              </button>
            </div>
          )}
        </div>
      </div>
      
      <div className={styles.section}>
        <h3 className={styles.sectionHeader}>–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å Supabase</h3>
        <div className={styles.supabaseConnection}>
          <div>
            <strong>URL:</strong> {supabaseInfo.url}
          </div>
          <div>
            <strong>–ö–ª—é—á:</strong> {supabaseInfo.anonKey}
          </div>
          <div>
            <strong>–ö–ª–∏–µ–Ω—Ç:</strong> 
            <span className={supabaseInfo.isClientInitialized ? styles.statusOk : styles.statusError}>
              {supabaseInfo.isClientInitialized ? '–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω' : '–ù–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω'}
            </span>
          </div>
          <div>
            <strong>–°—Ç–∞—Ç—É—Å:</strong> 
            <span className={supabaseConnectionDetails.connected ? styles.statusOk : styles.statusError}>
              {supabaseConnectionDetails.connected ? '–ü–æ–¥–∫–ª—é—á–µ–Ω–æ' : '–ù–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–æ'}
            </span>
          </div>
          
          {supabaseConnectionDetails.error && (
            <div>
              <strong>–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è:</strong> 
              <pre className={styles.errorText}>
                {typeof supabaseConnectionDetails.error === 'string' 
                  ? supabaseConnectionDetails.error 
                  : JSON.stringify(supabaseConnectionDetails.error, null, 2)}
              </pre>
            </div>
          )}
        </div>
      </div>
      
      <div className={styles.section}>
        <h3 className={styles.sectionHeader}>Telegram –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å</h3>
        <div className={styles.telegramUserInfo}>
          {telegramUser ? (
            <>
              <div><strong>ID:</strong> {telegramUser.id}</div>
              <div><strong>Username:</strong> {telegramUser.username || '–ù–µ —É–∫–∞–∑–∞–Ω'}</div>
              <div><strong>–ò–º—è:</strong> {telegramUser.first_name || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}</div>
              <div><strong>–§–∞–º–∏–ª–∏—è:</strong> {telegramUser.last_name || '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}</div>
              <div>
                <strong>–§–æ—Ç–æ:</strong> {telegramUser.photo_url 
                  ? <a href={telegramUser.photo_url} target="_blank" rel="noopener noreferrer">–°—Å—ã–ª–∫–∞</a> 
                  : '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}
              </div>
              
              {!authContextData?.isAuthenticated && (
                <div style={{ marginTop: '10px' }}>
                  <button 
                    className={styles.actionButton} 
                    onClick={handleForceCreateUser}
                    disabled={isCreatingUser}
                    style={{ width: '100%', padding: '10px', marginLeft: 0 }}
                  >
                    {isCreatingUser ? '–°–æ–∑–¥–∞–Ω–∏–µ...' : '–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —Å–æ–∑–¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è'}
                  </button>
                </div>
              )}
              
              {creationResult && (
                <div className={styles.creationResult}>
                  <h4>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω:</h4>
                  <pre>{JSON.stringify(creationResult, null, 2)}</pre>
                </div>
              )}
              
              {creationError && (
                <div className={styles.creationError}>
                  <h4>–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:</h4>
                  <p>{creationError}</p>
                </div>
              )}
            </>
          ) : (
            <div className={styles.statusError}>–î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Telegram –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç</div>
          )}
        </div>
      </div>
      
      <div className={styles.section}>
        <h3 className={styles.sectionHeader}>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å Supabase</h3>
        <div className={styles.supabaseUserInfo}>
          {authContextData?.userData ? (
            <>
              <div><strong>ID:</strong> {authContextData.userData.id}</div>
              <div><strong>Telegram ID:</strong> {authContextData.userData.telegram_id || '–ù–µ —Å–≤—è–∑–∞–Ω'}</div>
              <div><strong>Username:</strong> {authContextData.userData.username || '–ù–µ —É–∫–∞–∑–∞–Ω'}</div>
              <div><strong>–ò–º—è:</strong> {authContextData.userData.first_name || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}</div>
              <div><strong>–§–∞–º–∏–ª–∏—è:</strong> {authContextData.userData.last_name || '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}</div>
              <div><strong>–°–æ–∑–¥–∞–Ω:</strong> {authContextData.userData.created_at 
                ? new Date(authContextData.userData.created_at).toLocaleString() 
                : '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}</div>
              <div><strong>–û–±–Ω–æ–≤–ª–µ–Ω:</strong> {authContextData.userData.updated_at 
                ? new Date(authContextData.userData.updated_at).toLocaleString() 
                : '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}</div>
            </>
          ) : (
            <div className={styles.statusError}>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å Supabase –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω</div>
          )}
        </div>
      </div>
      
      <div className={styles.copySection}>
        <button className={styles.copyButton} onClick={onCopy}>
          üìã –ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        </button>
      </div>
    </div>
  );
};

export default AuthDetailsTab; 